#pragma once

#include <array>

#include "Base/Base.h"
#include "Base/Bus.h"

namespace esx {

	constexpr size_t VOICE_VOLUME_ADDRESS = 0x1F801C00;
	constexpr size_t VOICE_ADPCM_SAMPLE_RATE_ADDRESS = 0x1F801C04;
	constexpr size_t VOICE_ADPCM_START_ADRESS_ADDRESS = 0x1F801C6;
	constexpr size_t VOICE_ADSR_ADDRESS = 0x1F801C08;
	constexpr size_t VOICE_ADSR_CURRENT_VOLUME_ADDRESS = 0x1F801C0C;
	constexpr size_t VOICE_ADPCM_REPEAT_ADRESS_ADDRESS = 0x1F801C0E;
	constexpr size_t MAIN_VOLUME_ADDRESS = 0x1F801D80;
	constexpr size_t REVERB_OUTPUT_VOLUME_ADDRESS = 0x1F801D84;
	constexpr size_t VOICE_KEY_ON_ADDRESS = 0x1F801D88;
	constexpr size_t VOICE_KEY_OFF_ADDRESS = 0x1F801D8C;
	constexpr size_t VOICE_CHANNEL_FM_ADDRESS = 0x1F801D90;
	constexpr size_t VOICE_CHANNEL_NOISE_MODE_ADDRESS = 0x1F801D94;
	constexpr size_t VOICE_CHANNEL_REVERB_MODE_ADDRESS = 0x1F801D98;
	constexpr size_t VOICE_CHANNEL_STATUS_ADDRESS = 0x1F801D9C;
	constexpr size_t UNKNOWN_1_ADDRESS = 0x1F801DA0;
	constexpr size_t SOUND_RAM_REVERB_START_ADDRESS_ADDRESS = 0x1F801DA2;
	constexpr size_t SOUND_RAM_IRQ_ADDRESS_ADDRESS = 0x1F801DA4;
	constexpr size_t SOUND_RAM_DATA_TRANSFER_ADDRESS_ADDRESS = 0x1F801DA6;
	constexpr size_t SOUND_RAM_DATA_TRANSFER_FIFO_ADDRESS = 0x1F801DA8;
	constexpr size_t SPU_CONTROL_REGISTER_ADDRESS = 0x1F801DAA;
	constexpr size_t SOUND_RAM_DATA_TRANSFER_CONTROL_ADDRESS = 0x1F801DAC;
	constexpr size_t SPU_STATUS_REGISTER_ADDRESS = 0x1F801DAE;
	constexpr size_t CD_VOLUME_ADDRESS = 0x1F801DB0;
	constexpr size_t EXTERN_VOLUME_ADDRESS = 0x1F801DB4;
	constexpr size_t CURRENT_MAIN_VOLUME_ADDRESS = 0x1F801DB8;
	constexpr size_t UNKNOWN_2_ADDRESS = 0x1F801DBC;
	constexpr size_t REVERB_APF_OFFSET_1_ADDRESS = 0x1F801DC0;
	constexpr size_t REVERB_APF_OFFSET_2_ADDRESS = 0x1F801DC2;
	constexpr size_t REVERB_REFLECTION_VOLUME_1_ADDRESS = 0x1F801DC4;
	constexpr size_t REVERB_COMB_VOLUME_1_ADDRESS = 0x1F801DC6;
	constexpr size_t REVERB_COMB_VOLUME_2_ADDRESS = 0x1F801DC8;
	constexpr size_t REVERB_COMB_VOLUME_3_ADDRESS = 0x1F801DCA;
	constexpr size_t REVERB_COMB_VOLUME_4_ADDRESS = 0x1F801DCC;
	constexpr size_t REVERB_REFLECTION_VOLUME_2_ADDRESS = 0x1F801DCE;
	constexpr size_t REVERB_APF_VOLUME_1_ADDRESS = 0x1F801DD0;
	constexpr size_t REVERB_APF_VOLUME_2_ADDRESS = 0x1F801DD2;
	constexpr size_t REVERB_SAME_SIDE_REFLECTION_ADDRESS_1_ADDRESS = 0x1F801DD4;
	constexpr size_t REVERB_COMB_ADDRESS_1_ADDRESS = 0x1F801DD8;
	constexpr size_t REVERB_COMB_ADDRESS_2_ADDRESS = 0x1F801DDC;
	constexpr size_t REVERB_SAME_SIDE_REFLECTION_ADDRESS_2_ADDRESS = 0x1F801DE0;
	constexpr size_t REVERB_DIFFERENT_SIDE_REFLECTION_ADDRESS_1_ADDRESS = 0x1F801DE4;
	constexpr size_t REVERB_COMB_ADDRESS_3_ADDRESS = 0x1F801DE8;
	constexpr size_t REVERB_COMB_ADDRESS_4_ADDRESS = 0x1F801DEC;
	constexpr size_t REVERB_DIFFERENT_SIDE_REFLECTION_ADDRESS2_ADDRESS = 0x1F801DF0;
	constexpr size_t REVERB_APF_ADDRESS_1_ADDRESS = 0x1F801DF4;
	constexpr size_t REVERB_APF_ADDRESS_2_ADDRESS = 0x1F801DF8;
	constexpr size_t REVERB_INPUT_VOLUME_ADDRESS = 0x1F801DFC;
	constexpr size_t VOICE_CURRENT_VOLUME_ADDRESS = 0x1F801E00;
	constexpr size_t UNKNOWN_3_ADDRESS = 0x1F801E60;
	constexpr size_t UNKNOWN_4_ADDRESS = 0x1F801E80;

	struct SPUIORegisters {
		std::array<uint32_t, 24> VOICE_VOLUME;
		std::array<uint16_t, 24> VOICE_ADPCM_SAMPLE_RATE;
		std::array<uint16_t, 24> VOICE_ADPCM_START_ADRESS;
		std::array<uint32_t, 24> VOICE_ADSR;
		std::array<uint16_t, 24> VOICE_ADSR_CURRENT_VOLUME;
		std::array<uint16_t, 24> VOICE_ADPCM_REPEAT_ADRESS;
		uint32_t MAIN_VOLUME;
		uint32_t REVERB_OUTPUT_VOLUME;
		uint32_t VOICE_KEY_ON;
		uint32_t VOICE_KEY_OFF;
		uint32_t VOICE_CHANNEL_FM;
		uint32_t VOICE_CHANNEL_NOISE_MODE;
		uint32_t VOICE_CHANNEL_REVERB_MODE;
		uint32_t VOICE_CHANNEL_STATUS;
		uint16_t UNKNOWN_1;
		uint16_t SOUND_RAM_REVERB_START_ADDRESS;
		uint16_t SOUND_RAM_IRQ_ADDRESS;
		uint16_t SOUND_RAM_DATA_TRANSFER_ADDRESS;
		uint16_t SOUND_RAM_DATA_TRANSFER_FIFO;
		uint16_t SPU_CONTROL_REGISTER;
		uint16_t SOUND_RAM_DATA_TRANSFER_CONTROL;
		uint16_t SPU_STATUS_REGISTER;
		uint32_t CD_VOLUME;
		uint32_t EXTERN_VOLUME;
		uint32_t CURRENT_MAIN_VOLUME;
		uint32_t UNKNOWN_2;
		uint16_t REVERB_APF_OFFSET_1;
		uint16_t REVERB_APF_OFFSET_2;
		uint16_t REVERB_REFLECTION_VOLUME_1;
		uint16_t REVERB_COMB_VOLUME_1;
		uint16_t REVERB_COMB_VOLUME_2;
		uint16_t REVERB_COMB_VOLUME_3;
		uint16_t REVERB_COMB_VOLUME_4;
		uint16_t REVERB_REFLECTION_VOLUME_2;
		uint16_t REVERB_APF_VOLUME_1;
		uint16_t REVERB_APF_VOLUME_2;
		uint32_t REVERB_SAME_SIDE_REFLECTION_ADDRESS_1;
		uint32_t REVERB_COMB_ADDRESS_1;
		uint32_t REVERB_COMB_ADDRESS_2;
		uint32_t REVERB_SAME_SIDE_REFLECTION_ADDRESS_2;
		uint32_t REVERB_DIFFERENT_SIDE_REFLECTION_ADDRESS_1;
		uint32_t REVERB_COMB_ADDRESS_3;
		uint32_t REVERB_COMB_ADDRESS_4;
		uint32_t REVERB_DIFFERENT_SIDE_REFLECTION_ADDRESS2;
		uint32_t REVERB_APF_ADDRESS_1;
		uint32_t REVERB_APF_ADDRESS_2;
		uint32_t REVERB_INPUT_VOLUME;
		std::array<uint32_t, 24> VOICE_CURRENT_VOLUME;
		std::array<uint32_t, 0x20> UNKNOWN_3;
		std::array<uint32_t, 0x180> UNKNOWN_4;
	};

	class SPU : public BusDevice {
	public:
		SPU();
		~SPU();

		virtual void write(const std::string& busName, uint32_t address, uint32_t value, size_t valueSize) override;
		virtual uint32_t read(const std::string& busName, uint32_t address, size_t outputSize) override;
	private:
		SPUIORegisters mIORegisters;
	};

}